package com.habits.track.concepts;

import java.util.List;

record Aggregate(int x, String y) {

    interface Event{};
    record UpdateXEvent(int x) implements Event{};
    record UpdateYEvent(String y) implements Event{};

    static enum EventHandler{
        X(UpdateXEvent.class){
            Aggregate handleEvent(UpdateXEvent evt, Aggregate agg){
                return new Aggregate(evt.x, agg.y());
            }
        }, 
        Y(UpdateYEvent.class){
            Aggregate handleEvent(UpdateYEvent evt, Aggregate agg){
                return new Aggregate(agg.x(), evt.y);
            }
        };

        private final Class<?> clazz;

        EventHandler(Class<?> c){
            this.clazz = c;
        }
    }

    Aggregate applyEvents(List<EventHandler> events){
        Aggregate current = this;
        for(var e: events)
        {
            current = e.handleEvent(e, this);
        }
        return current;
    }

    public static void main(String[] args) {
        List<EventHandler> events = List.of(new UpdateXEvent(999), new UpdateYEvent("Updated"));
        Aggregate agg = new Aggregate(0, "before");
        Aggregate output = agg.applyEvents(events);
        System.out.println(String.format("X=%d Y=%s", output.x(), output.y()));
    }
}
